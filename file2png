#!/bin/sh

VERSION='0.1'

_NAME_="$(basename "$0")"

while [ "$#" -gt 0 ]; do
  case "$1" in
    -c|--config) config="$2"; shift 2;;
    -i|--input) inputFile="$2"; shift 2;;
    -o|--output) outputFile="$2" ; shift 2;;
    -*) echo "unknown option: $1" >&2; exit 1;;
    *) handle_argument "$1"; shift 1;;
  esac
done

## restore file
## $1 input file
## $2 output file
restorefile () {
    local IN OUT
    _RAW="$(mktemp)"
    IN="$1"
    OUT="$2"
    convert PNG:"$IN" RGB:"$2"
} # restorefile

## store file
## $1 input file
## $2 output file
storefile () {

    _arg_bitdepth=8
    IN="$1"
    #OUT="$(fn_check_file "$2" out)"
    OUT="$2"
    
    ## bytes per 3 color pixel
    PIXBYTE=$(( $_arg_bitdepth * 3 / 8 ))
    
    if [ _"$IN" = _'/dev/stdin' ] || [ _"$OUT" = _'/dev/stdout' ]; then
        errlog "Stdin and stdout not supported for this type of operation."
        exit 1
    fi
    
    NAME="$(basename "$IN")"
    
    if [ -z "$OUT" ]; then
        OUTPUT="$(mktemp 'XXXXXXXXXX.png')"
    else
        OUTPUT="$OUT"
    fi
    
    SHA="$(sha256sum "$IN" | awk '{print $1}')"

    SIZE="$(stat -c '%s' "$IN")"

    TMP="$(mktemp)"

    cp "$IN" "$TMP"

    ## Store metadata
    echo '' >> "$TMP"
    echo "###SIZE: $SIZE :EZIS###"  >> "$TMP"
    echo "###NAME: $NAME :ENAM###"  >> "$TMP"
    echo "###SHA256: $SHA :652AHS###" >> "$TMP"
    echo "###VERSION: $VERSION :NOISREV###" >> "$TMP"
    if [ -n "$_arg_comment" ]; then
        echo "$_arg_comment" | while read L; do
            echo "###COMMENT: $L :TNEMMOC###" >> "$TMP"
        done
    fi
    echo "###UTIL:  Decode: https://github.com/nishad10/file2png#readme  :LITU###" >> "$TMP"

    SIZE="$(stat -c '%s' "$TMP")"
    
    _PIXELS=$(( $SIZE  / $PIXBYTE ))
    
    echo "TMP pixels: $_PIXELS"
    
    RESOL="$(echo "sqrt($_PIXELS) +1" | bc)"
    
    echo "Target resolution: ${RESOL}x${RESOL}"
    
    PIXELS=$(( $RESOL * $RESOL ))
    
    ## calculating target size
    CONTAINERSIZE=$(( $PIXELS * $PIXBYTE ))
    echo "Container size: $CONTAINERSIZE"
    
    BYTESDIFF=$(( $CONTAINERSIZE - $SIZE ))
    
    echo "Extra space in container: $BYTESDIFF"
    
    if [ $BYTESDIFF -gt 0 ]; then
        ## adding missing bytes
        dd if=/dev/zero bs=$BYTESDIFF count=1 >> "$TMP"
    elif [ $BYTESDIFF -lt 0 ]; then
        errlog "Error: unexpected container size."
        exit 1
    fi

    cat ${TMP} | convert -size ${RESOL}x${RESOL} -depth $_arg_bitdepth RGB:- "$OUTPUT"
    
    rm "$TMP"
} # storefile()

if [ "$config" = "store" ]; then
    storefile "$inputFile" "$outputFile"
    exit 0
elif [ "$config" = "restore" ]; then
    restorefile "$inputFile" "$outputFile"
    exit 0
else
    errlog "$USAGE"
    exit 1
fi
